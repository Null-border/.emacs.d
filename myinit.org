



* find out
** message
   #+begin_src emacs-lisp
     (setq garbage-collection-messages nil
	   large-file-warning-threshold nil)
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** buffer display
   #+begin_src emacs-lisp
     ;; Configure ‘display-buffer’ behaviour for some special buffers
     (setq display-buffer-alist
	   `(;; Messages, errors, processes, Calendar in the bottom side window
	     (,(rx bos (or "*Apropos"                ; Apropos buffers
			   "*Man"                    ; Man buffers
			   ;; "*Help"                   ; Help buffers
			   "*Warnings*"              ; Emacs warnings
			   "*Process List*"          ; Processes
			   "*Proced"                 ; Proced processes list
			   "*Compile-Log*"           ; Emacs byte compiler log
			   "*compilation"            ; Compilation buffers
			   "*Flycheck errors*"       ; Flycheck error list
			   "*Calendar"               ; Calendar window
			   "*env-info"               ; Environment information
			   "*Cargo"                  ; Cargo process buffers
			   "*Word"                   ; WordNut buffers
			   "*Reconcile*"             ; Reconcile in ledger-mode
			   (and (1+ nonl) " output*"))) ; AUCTeX command output
	      (display-buffer-reuse-window display-buffer-in-side-window)
	      (side . bottom)
	      (reusable-frames . visible)
	      (window-height . 0.45))
	     ;; REPLs on the bottom half
	     (,(rx bos (or "*cider-repl"     ; CIDER REPL
			   "*intero"         ; Intero REPL
			   "*idris-repl"     ; Idris REPL
			   "*ielm"           ; IELM REPL
			   "*SQL"))          ; SQL REPL
	      (display-buffer-reuse-window display-buffer-in-side-window)
	      (side . bottom)
	      (reusable-frames . visible)
	      (window-height . 0.50))
	     ;; Open shell in a single window
	     (,(rx bos "*shell")
	      (display-buffer-same-window)
	      (reusable-frames . nil))
	     ;; Open PDFs in the right side window
	     (,(rx bos "*pdf")
	      (display-buffer-reuse-window display-buffer-in-side-window)
	      (side . right)
	      (reusable-frames . visible)
	      (window-width . 0.5))
	     ;; Let `display-buffer' reuse visible frames for all buffers. This must
	     ;; be the last entry in `display-buffer-alist', because it overrides any
	     ;; previous entry with more specific actions.
	     ("." nil (reusable-frames . visible))))
   #+end_src

** buffer switch
*** Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel)
  #+END_SRC
*** Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure try
      :bind (("C-s"  . swiper)
	     ("M-x"  . counsel-M-x)
	     ("C-x C-f"  . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)))
  #+END_SRC
** UTILS
*** Try
  #+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t
    )

  #+END_SRC
*** Which Key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode)
      )

  #+END_SRC

*** smex
    #+begin_src emacs-lisp
      (use-package smex)
    #+end_src
*** undo tree
    #+begin_src emacs-lisp
 ;;     (use-package undo-tree
 ;;       :diminish undo-tree-mode
 ;;       :config (global-undo-tree-mode))

    #+end_src



* look
** interface
*** frame
    #+begin_src emacs-lisp
      (setq frame-title-format "nullmacs@sand_dream")
      (toggle-frame-maximized)
    #+end_src

*** bars
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
   #+END_SRC
*** startup message
#+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
#+END_SRC
*** tranparent
#+BEGIN_SRC emacs-lisp
;; (set-frame-parameter nil 'alpha 75)
#+END_SRC
*** theme
  #+BEGIN_SRC emacs-lisp
    (use-package tangotango-theme
      :ensure t
      )

    (enable-theme 'tangotango)

  #+END_SRC
*** cursor
rainbow cursor
   #+begin_src emacs-lisp
	       ;; we don't want the cursor vanish
	       (blink-cursor-mode -1)

	       (setq rainbow-color-list '("#FF0000";red
					  "#FF5000"
					  "#FF9F00";orange
					  "#FFFF00";yellow
					  "#BFFF00"
					  "#00FF00";green
					  "#00FFFF";
					  "#0088FF"
					  "#0000FF";blue
					  "#5F00FF"
					  "#8B00FF";purple
					  "#CF00FF"
					  "#FF0088"
					  ))
	       ;; declair the variable
	       (setq cursor-color-pointer 1)

	       ;; declaire the function
	       (defun cursor-color-change ()
		 "Take a color from `rainbow-color-list' by the pointer.  
	       The pointer moves by +1, and restore by taking mod.  "
		 (setq cursor-color-pointer (% (1+ cursor-color-pointer)
					       (length rainbow-color-list)))
		 (set-cursor-color (nth cursor-color-pointer
				    rainbow-color-list))
		 )

	       ;; main function.  gothrough the `rainbow-color-list' within 0.5s. calls `cursor-color-change' .  
	       (run-with-timer ()
			       (/ .5 (length rainbow-color-list))
			       'cursor-color-change)

   #+end_src
*** battery
#+BEGIN_SRC emacs-lisp
  (display-battery-mode)

  (setq  battery-load-critical 25
	 battery-load-low 50
	 battery-mode-line-format "  [%p%% %m]  "
	 battery-update-interval 30)
#+END_SRC
*** average load
#+BEGIN_SRC emacs-lisp
  ;;  (setq display-time-load-average-threshold 100)
  (setq display-time-default-load-average nil)
#+END_SRC

*** Time
  #+BEGIN_SRC emacs-lisp
    (display-time-mode)

    (setq display-time-24hr-format t
	  display-time-day-and-date t
	  display-time-format "%H:%M %m-%d %a")

  #+END_SRC
*** scroll
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 2
	   scroll-margin 2
	   scroll-conservatively 101
	   scroll-up-aggressively 0.01
	   scroll-down-aggressively 0.01)
      
   #+END_SRC
*** line number
displaying line number on the left is ugly. 
  #+BEGIN_SRC emacs-lisp
    ;; 
  #+END_SRC
*** paren
  #+BEGIN_SRC emacs-lisp
    (use-package paren
      :ensure nil
      :hook (after-init . show-paren-mode)
      :init (setq show-paren-when-point-inside-paren t
		  show-paren-when-point-in-periphery t
		  show-paren-highlight-openparen t))

    (use-package rainbow-delimiters 
      :ensure t 
      :config
      ;; 设置每一级括号的颜色
      (set-face-foreground 'rainbow-delimiters-depth-1-face "gold") 
      (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1") 
      (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green") 
      (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink") 
      (set-face-foreground 'rainbow-delimiters-depth-5-face "DarkOrange2")
      (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise") 
      (set-face-foreground 'rainbow-delimiters-depth-7-face "medium orchid") 
      (set-face-foreground 'rainbow-delimiters-depth-8-face "chartreuse3") 
      (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan") 
      (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-2-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-3-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-4-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-5-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-6-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-7-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-8-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-9-face "t") 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  #+END_SRC
*** info help
  #+BEGIN_SRC emacs-lisp
    (use-package 
      info-colors 
      :ensure t 
      :hook ('Info-selection-hook . 'info-colors-fontify-node))

  #+END_SRC
** buffer customize
 #+BEGIN_SRC emacs-lisp
 (setq initial-scratch-message nil)

 #+END_SRC
** line wrap
   #+begin_src emacs-lisp
     (set-default 'truncate-lines t)
   #+end_src

** UTILS
*** Auto Complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
    ;;(use-package company
    ;;  :hook
    ;;  ((prog-mode . company-mode)
    ;;   (conf-mode . company-mode)
    ;;   (shell-mode . company-mode)))

  #+END_SRC
*** magit
    #+begin_src emacs-lisp
      ;; (use-package magit
      ;;   :init (setq magit-completing-read-function 'ivy-completing-read))
      ;;     (use-package diff-hl)

    #+end_src
*** projectile
    #+begin_src emacs-lisp

    #+end_src
*** pdf
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-width)
       )
   #+END_SRC

*** browse
  #+BEGIN_SRC emacs-lisp
 ;;   (use-package firefox-controller)
  #+END_SRC



* form
** mode customize
*** major mode in new file
 #+BEGIN_SRC emacs-lisp
 (setq initial-major-mode 'org-mode)
       
 #+END_SRC
*** ORG mode
**** org mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t)

  #+END_SRC

**** org bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC
**** keybinds
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  #+END_SRC
**** cycle
 #+BEGIN_SRC emacs-lisp
   (setq org-cycle-emulate-tab t
	 org-cycle-global-at-bob t
	 )

 #+END_SRC
**** capture
**** startup
 #+BEGIN_SRC emacs-lisp
;; hide src blocks
   (setq org-hide-block-startup t
	 )

 #+END_SRC
**** table
 #+BEGIN_SRC emacs-lisp
   (custom-set-faces '(org-table ((t (:foreground "#a9a1e1" :height 120 :family "Noto Sans Mono CJK SC Regular")))))

 #+END_SRC
**** org-rempo, expand source block
 #+BEGIN_SRC emacs-lisp
   (require 'org-tempo)

 #+END_SRC

*** export engine
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :commands (org-reveal)
    :init
    (add-hook 'after-init-hook #'org-reveal)
    :config
    (setq org-reveal-root "file:///home/qb/.reveal.js"
	  org-reveal-theme "moon"
	  org-reveal-plugins '(classList markdown zoom notes)
	  ))
  (use-package htmlize)
#+END_SRC

*** Tex
**** auctex
 #+BEGIN_SRC emacs-lisp
   (use-package tex
     :ensure auctex)

   (use-package auctex
     :hook
     (LaTeX-mode . visual-line-mode)
     (LaTeX-mode . LaTeX-math-mode))

 #+END_SRC

*** C mode
    #+begin_src emacs-lisp

    #+end_src

*** python
    #+begin_src emacs-lisp
;;      (use-package elpy
;;	:config
;;	(elpy-enable))

      ;;(use-package jedi)
      ;;(use-package jedi-direx)
    #+end_src

**** org-mouse
     #+begin_src emacs-lisp
       (setq org-mouse-features '(activate-checkboxes))
     #+end_src



* deforming
** replace
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-r" 'query-replace)
   #+END_SRC
** delete
   #+begin_src emacs-lisp
     (hungry-delete-mode 1)
   #+end_src
** clipboard
** line
  #+BEGIN_SRC emacs-lisp
    (setq  line-move-ignore-invisible t
	   next-line-add-newlines t)
  #+END_SRC
** fill collomn
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 78)
  #+END_SRC
** UTILS
*** flycheck
  #+BEGIN_SRC emacs-lisp
;;    (use-package flycheck
;;      :hook
;;      (prog-mode . flycheck-mode))

  #+END_SRC

*** figlet
    #+begin_src emacs-lisp
      (use-package figlet)
    #+end_src

* leaving
** idle setups
   #+begin_src emacs-lisp
     (setq idle-use-function '(garbage-collect file-save)
	   idle-play-function '(zone)
	   idle-use-time 5
	   idle-play-time 90
	   n 0)

     (while (< n (length idle-use-function))
       (run-with-idle-timer idle-use-time t (nth n idle-use-function))
       (setq n (1+ n)))
     (setq n 0)

     (while (< n (length idle-play-function))
       (run-with-idle-timer idle-play-time t (nth n idle-play-function))
       (setq n (1+ n)))
     (setq n 0)

     (defun file-save ()
       "save file"
       ;; not finished
       )
   #+end_src
** delete
  #+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
  #+END_SRC
** backup
 #+BEGIN_SRC emacs-lisp
 (setq make-backup-files nil)

 #+END_SRC
** auto-save
 #+BEGIN_SRC emacs-lisp
 (setq auto-save-default nil)

 #+END_SRC
***  Auto Save Directory
we haven't enable auto save yet. 
let's pray that no missing will happen till we set up the auto save. 
#+begin_src emacs-lisp
  ;;(setq tramp-auto-save-directory "~/.emacs.d/auto-save/")

#+end_src
** Restart Emacs
 #+BEGIN_SRC emacs-lisp
 (use-package restart-emacs
   :ensure t
   )

 #+END_SRC

** revert buffer
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC









* TEST AREA
  #+begin_src emacs-lisp




  #+end_src
* NO_NEED AREA
gif-screencast














