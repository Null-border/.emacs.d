




* find out
** buffer switch
*** Counsel
  #+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  #+END_SRC
*** Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure try
      :bind (("C-s"  . swiper)
	     ("M-x"  . counsel-M-x)
	     ("C-x C-f"  . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)))
  #+END_SRC
** Try
 #+BEGIN_SRC emacs-lisp
 (use-package try
   :ensure t
   )

 #+END_SRC
** Which Key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode)
     )

 #+END_SRC


* look
** interface
*** bars
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
   #+END_SRC
*** startup message
#+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
#+END_SRC
*** tranparent
#+BEGIN_SRC emacs-lisp
;; (set-frame-parameter nil 'alpha 75)
#+END_SRC
*** theme
  #+BEGIN_SRC emacs-lisp
    (use-package tangotango-theme
      :ensure t
      )

    (enable-theme 'tangotango)

  #+END_SRC
*** cursor
rainbow cursor
   #+begin_src emacs-lisp
     ;; we don't want the cursor vanish
     (blink-cursor-mode -1)

     ;; the color change every 0.05s, so 1s/0.05s is 20.
     ;; 3 * 256 / 20 is around 55
     ;; for easy typing , we choose 0x55 and 0xAA

     (setq cursor-color-list '("#FF0000"
			       "#FF5500"
			       "#FFAA00"
			       "#FFFF00"
			       "#AAFF00"
			       "#55FF00"
			       "#00FF00"
			       "#00FF55"
			       "#00FFAA"
			       "#00FFFF"
			       "#00AAFF"
			       "#0055FF"
			       "#0000FF"
			       "#5500FF"
			       "#AA00FF"
			       "#FF00FF"
			       "#FF00AA"
			       "#FF0055"))
     ;; declair the variable
     (setq cursor-color-pointer 1)

     ;; declaire the function
     (defun cursor-color-change ()
       "Called every 0.05s.  Take a color from `cursor-color-list' by the pointer.  
     The pointer moves by +1, and restore by taking mod.  "
       (setq cursor-color-pointer (% (1+ cursor-color-pointer)
				     (length cursor-color-list)))
       (set-cursor-color (nth cursor-color-pointer
			      cursor-color-list))
       )

     ;; main function.  run `cursor-color-change' every 0.05s.  
     (run-with-timer () 0.05 'cursor-color-change)
   #+end_src
*** battery
#+BEGIN_SRC emacs-lisp
  (setq  display-battery-mode t
         battery-load-critical 25
         battery-load-low 50
         battery-mode-line-format "  [%p%% %m]  "
         battery-update-interval 30)
#+END_SRC
*** Time
  #+BEGIN_SRC emacs-lisp
    (setq display-time-mode t
          display-time-24hr-format t
          display-time-day-and-date t
          display-time-default-load-average nil
          display-time-format "%H:%M %m-%d %a")

  #+END_SRC
*** scroll
   #+BEGIN_SRC emacs-lisp
     (setq scroll-step 2
	   scroll-margin 2
	   scroll-conservatively 101
	   scroll-up-aggressively 0.01
	   scroll-down-aggressively 0.01)
      
   #+END_SRC
*** line
displaying line number on the left is ugly. 
  #+BEGIN_SRC emacs-lisp
    ;; 
  #+END_SRC
*** collomn
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 80)
  #+END_SRC
*** paren
  #+BEGIN_SRC emacs-lisp
    (use-package paren
      :ensure nil
      :hook (after-init . show-paren-mode)
      :init (setq show-paren-when-point-inside-paren t
		  show-paren-when-point-in-periphery t
		  show-paren-highlight-openparen t))

    (use-package rainbow-delimiters 
      :ensure t 
      :config
      ;; 设置每一级括号的颜色
      (set-face-foreground 'rainbow-delimiters-depth-1-face "gold") 
      (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1") 
      (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green") 
      (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink") 
      (set-face-foreground 'rainbow-delimiters-depth-5-face "DarkOrange2")
      (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise") 
      (set-face-foreground 'rainbow-delimiters-depth-7-face "medium orchid") 
      (set-face-foreground 'rainbow-delimiters-depth-8-face "chartreuse3") 
      (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan") 
      (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-2-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-3-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-4-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-5-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-6-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-7-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-8-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-9-face "t") 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  #+END_SRC

*** info help
  #+BEGIN_SRC emacs-lisp
    (use-package 
      info-colors 
      :ensure t 
      :hook ('Info-selection-hook . 'info-colors-fontify-node))

  #+END_SRC
** buffer customize
 #+BEGIN_SRC emacs-lisp
 (setq initial-scratch-message nil)

 #+END_SRC
** Auto Complete
 #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
     :ensure t
     :init
     (progn
       (ac-config-default)
       (global-auto-complete-mode t)
       ))
   ;;(use-package company
   ;;  :hook
   ;;  ((prog-mode . company-mode)
   ;;   (conf-mode . company-mode)
   ;;   (shell-mode . company-mode)))

 #+END_SRC
** magit
   #+begin_src emacs-lisp
;;     (use-package magit)
;;     (use-package diff-hl)

   #+end_src
** pdf
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :defer t
      :config
      (setq-default pdf-view-display-size 'fit-width)
      :bind
      (:map pdf-view-mode-map
	    ("<s-spc>" . pdf-view-scroll-down-or-next-page)
	    ("g"  . pdf-view-first-page)
	    ("G"  . pdf-view-last-page)
	    ("l"  . image-forward-hscroll)
	    ("h"  . image-backward-hscroll)
	    ("j"  . pdf-view-next-page)
	    ("k"  . pdf-view-previous-page)
	    ("e"  . pdf-view-goto-page)
	    ("u"  . pdf-view-revert-buffer)
	    ("al" . pdf-annot-list-annotations)
	    ("ad" . pdf-annot-delete)
	    ("aa" . pdf-annot-attachment-dired)
	    ("am" . pdf-annot-add-markup-annotation)
	    ("at" . pdf-annot-add-text-annotation)
	    ("y"  . pdf-view-kill-ring-save)
	    ("i"  . pdf-misc-display-metadata)
	    ("s"  . pdf-occur)
	    ("b"  . pdf-view-set-slice-from-bounding-box)
	    ("r"  . pdf-view-reset-slice)))
  #+END_SRC


* form
** mode customize
*** major mode in new file
 #+BEGIN_SRC emacs-lisp
 (setq initial-major-mode 'org-mode)
       
 #+END_SRC
*** ORG mode
**** org mode
  #+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)
  #+END_SRC
**** org bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC
**** keybinds
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  #+END_SRC
**** 
 #+BEGIN_SRC emacs-lisp
   (setq org-hide-block-startup t
	 )

 #+END_SRC

*** Tex relevent
**** auctex
 #+BEGIN_SRC emacs-lisp
;;   (use-package auctex
;;   :defer t
;;     :hook
;;     (LaTeX-mode . visual-line-mode)
;;     (LaTeX-mode . flycheck-mode)
;;     (LaTeX-mode . LaTeX-math-mode)
;;     (LaTeX-mode . company-mode)
;;     :custom
;;     (preview-scale-function (quote preview-scale-from-face))
;;     (preview-scale-function 3)
;;     :config
;;     (setq TeX-auto-save t
;;	   TeX-parse-self t
;;	   TeX-source-correlate-mode t
;;	   TeX-source-correlate-method 'synctex
;;	   TeX-view-program-selection (quote (
;;					      (output-dvi style-pstricks "dvips and gv")
;;					      (output-dvi "xdvi")
;;					      (output-pdf "Zathura")
;;					      (output-html "xdg-open")
;;					      ))
;;	   )
;;     (setq-default TeX-master nil
;;		   TeX-engine 'xetex)
;;
;;     (use-package company-auctex
;;       :after (auctex company)
;;       :init
;;       (company-auctex-init))
;;
;;     (use-package auctex-latexmk
;;       :after (auctex)
;;       :init
;;       (auctex-latexmk-setup)
;;       :custom
;;       (auctex-latexmk-inherit-TeX-PDF-mode t)))

 #+END_SRC


* deforming
** replace
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-r" 'query-replace)
   #+END_SRC
** clipboard
** line
  #+BEGIN_SRC emacs-lisp
    (setq  line-move-ignore-invisible t
	   next-line-add-newlines t)
  #+END_SRC
** utils


* close
** delete
  #+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
  #+END_SRC
** backup
 #+BEGIN_SRC emacs-lisp
 (setq make-backup-files nil)

 #+END_SRC
** auto-save
 #+BEGIN_SRC emacs-lisp
 (setq auto-save-default nil)

 #+END_SRC
***  Auto Save Directory
we haven't enable auto save yet. 
let's pray that no missing will happen till we set up the auto save. 
#+begin_src emacs-lisp
  ;;(setq tramp-auto-save-directory "~/.emacs.d/auto-save/")

#+end_src
** Restart Emacs
 #+BEGIN_SRC emacs-lisp
 (use-package restart-emacs
   :ensure t
   )

 #+END_SRC

** revert buffer
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC


* other customizations


